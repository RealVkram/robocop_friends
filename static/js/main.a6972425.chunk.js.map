{"version":3,"sources":["serviceWorker.js","CardComponents/Card.js","CardComponents/CardList.js","CardComponents/SearchPanel.js","CardComponents/Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","email","id","name","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchPanel","search","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobot","filter","robot","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCHSC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACzB,OACE,yBAAKC,UAAU,qGACb,6BACE,4BAAKD,GACL,yBAAKE,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,oBAEvB,2BAAID,KCMKM,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLV,GAAIM,EAAOI,GAAGV,GACdC,KAAMK,EAAOI,GAAGT,KAChBF,MAAOO,EAAOI,GAAGX,WAIrB,OAAO,yBAAKG,UAAU,MAAMK,ICGjBK,EAdK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,OACE,6BACE,2BACEX,UAAU,uCACVY,KAAK,SACLb,KAAK,SACLc,YAAY,mBACZC,SAAUH,MCCHI,EATA,SAAAC,GAMb,OAAO,yBAAKC,MALM,CAChBC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAEqBJ,EAAMK,WCwCxBC,G,kBAzCb,aAAe,IAAD,8BACZ,+CAgBFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAAErB,OAAQ8B,S,+BAQpB,IAAD,EACyBC,KAAKN,MAA7BzB,EADD,EACCA,OAAQsB,EADT,EACSA,YAEVU,EAAgBhC,EAAOiC,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAGvD,OACE,yBAAKvC,UAAU,MACb,uCACA,6BACE,kBAAC,EAAD,CAAaW,OAAQwB,KAAKZ,kBAE5B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQgC,U,GApCVK,c,MCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.a6972425.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\n\r\nconst Card = ({ email, id, name }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma1 grow bw2 shadow-5 ba b--dotted bw1 b--dark-green link dim black\">\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      </div>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n        return <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    })\r\n\r\n    return <div className=\"tc\">{cardArray}</div>\r\n        \r\n}\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchPanel = ({ search }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue br4\"\r\n        type=\"search\"\r\n        name=\"search\"\r\n        placeholder=\"search robots...\"\r\n        onChange={search}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  const divScript = {\r\n    overflow: \"scroll\",\r\n    border: \"5px light black\",\r\n    height: \"500px\"\r\n  };\r\n  return <div style={divScript}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"./CardComponents/CardList\";\r\nimport SearchPanel from \"./CardComponents/SearchPanel\";\r\nimport Scroll from \"./CardComponents/Scroll\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = e => {\r\n    this.setState({ searchfield: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n\r\n    const filteredRobot = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>RoboCop</h1>\r\n        <div>\r\n          <SearchPanel search={this.onSearchChange} />\r\n        </div>\r\n        <Scroll>\r\n          <CardList robots={filteredRobot} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}